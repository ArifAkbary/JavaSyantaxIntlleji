What is PolyMorphism?
   polymorphism is the ability of a method to behave differently
   depending upon object or parameters that we pass to a method.
   when we use pass different parameters to method and it behave differentially
   then it is called static polymorphism (compile polymorphism)
  (early binding).

Note:
  When we achieve Polymorphism through method overdoing the it is called
  dynamic binding or run time PolyMorphism or late bin.

Why we should use polymorphism;

  1)cleaner code.
  2)we never prefer to change the existing code if we want to improve somethings-
  we always want to create new method and new classes.we can call these methods using the parent classes.
  3)we can call multiple methods from many different many class with help of a single variables like we can
  the array of object with help of a loop will be able to call all method from all class

How can we use polymorphism ;
  1) create a parents child relationships:
  2)override the method in the child classes.
  3)create the array of all the child class object with help of loop
  we can call the method from all the child class.

Rules:
  1) All the rules that apply for overriding also apply for the polymorphism.
  2)we can store the object of child class inside a variable of the type parents class but we can not do
  the reverse.
  3)we can also create arrays of type parent and they can hold the object of child classes.
----------------------------------------------------------------------------------------------------------------------
what is Abstraction:
    Abstract is providing only necessary details and hiding all implementations details.
    why should we learn Abstracting :
    1) it reduce the complexity by separating the idea from implementation.
    2) it helps use enforce rules and convey our requirements.

How can we use Abstractions:
   create class with abstract keyword.
   use the the abstract keyword with method header and don't provide the body of that method inside the
   parents class .
   create the child class extend these class from parents implement the abstract methods
   we can declare the child class as abstract as well.
----------------------------------------------------------------------------------------------------------------------








